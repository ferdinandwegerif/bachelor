package main

// Code generated by vugu via vugugen. Please regenerate instead of editing or add additional code in a separate file. DO NOT EDIT.

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"


type Tabs struct {
    tabs    []Tab
}


func (c *Tabs) selectTab(selectedTab){
    this.tabs.forEach(tab => {
        tab.active = tab.name === selectedTab.name;
    });
}
test = (a,b) => {
    return a+b
}
test(1,2)
func (c *All_tabs) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {
    
    vgout = &vugu.BuildOut{}
    
    var vgiterkey interface{}
    _ = vgiterkey
    var vgn *vugu.VGNode
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"div",Attr:[]vugu.VGAttribute(nil)}
vgout.Out = append(vgout.Out, vgn) // root for output
{
vgparent := vgn; _ = vgparent
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\\\n    "}
vgparent.AppendChild(vgn)
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"header",Attr:[]vugu.VGAttribute{vugu.VGAttribute{Namespace:"", Key:"class", Val:"tabs"}}}
vgparent.AppendChild(vgn)
{
vgparent := vgn; _ = vgparent
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n        "}
vgparent.AppendChild(vgn)
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"ul",Attr:[]vugu.VGAttribute{vugu.VGAttribute{Namespace:"", Key:"class", Val:"navigation"}}}
vgparent.AppendChild(vgn)
{
vgparent := vgn; _ = vgparent
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n            "}
vgparent.AppendChild(vgn)
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"li",Attr:[]vugu.VGAttribute{vugu.VGAttribute{Namespace:"", Key:"v-for", Val:"(tab, index) in this.tabs"}}}
vgparent.AppendChild(vgn)
vgn.AddAttrInterface("key",index)
{
vgparent := vgn; _ = vgparent
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n                "}
vgparent.AppendChild(vgn)
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"div",Attr:[]vugu.VGAttribute{vugu.VGAttribute{Namespace:"", Key:"class", Val:"nav-item"}, vugu.VGAttribute{Namespace:"", Key:"v-bind:class", Val:"{ active: tab.active }"}}}
vgparent.AppendChild(vgn)
vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
EventType: "click",
Func: func(event vugu.DOMEvent) { selectTab(tab) },
// TODO: implement capture, etc. mostly need to decide syntax
})
{
vgparent := vgn; _ = vgparent
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n                    {{ tab.name }}\n                "}
vgparent.AppendChild(vgn)
}
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n            "}
vgparent.AppendChild(vgn)
}
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n        "}
vgparent.AppendChild(vgn)
}
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n    "}
vgparent.AppendChild(vgn)
}
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n    "}
vgparent.AppendChild(vgn)
vgn = &vugu.VGNode{Type:vugu.VGNodeType(3),Namespace:"",Data:"main",Attr:[]vugu.VGAttribute{vugu.VGAttribute{Namespace:"", Key:"class", Val:"tab-details"}}}
vgparent.AppendChild(vgn)
vgn.SetInnerHTML(vugu.HTML("\n        \x3Cslot\x3E\x3C/slot\x3E\n    "))
vgn = &vugu.VGNode{Type:vugu.VGNodeType(1),Data:"\n"}
vgparent.AppendChild(vgn)
}
    return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value

